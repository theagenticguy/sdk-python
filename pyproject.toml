[project]
name = "strands-agents"
dynamic = ["version"]
description = "A model-driven approach to building AI agents in just a few lines of code"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "Apache-2.0" }
authors = [{ name = "AWS", email = "opensource@amazon.com" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "boto3>=1.26.0,<2.0.0",
    "botocore>=1.29.0,<2.0.0",
    "docstring_parser>=0.15,<1.0",
    "mcp>=1.11.0,<2.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "typing-extensions>=4.13.2,<5.0.0",
    "watchdog>=6.0.0,<7.0.0",
    "opentelemetry-api>=1.30.0,<2.0.0",
    "opentelemetry-sdk>=1.30.0,<2.0.0",
    "opentelemetry-instrumentation-threading>=0.51b0,<1.00b0",
]

[project.urls]
Homepage = "https://github.com/strands-agents/sdk-python"
"Bug Tracker" = "https://github.com/strands-agents/sdk-python/issues"
Documentation = "https://strandsagents.com"

[project.optional-dependencies]
anthropic = ["anthropic>=0.21.0,<1.0.0"]
litellm = ["litellm>=1.72.6,<1.73.0"]
llamaapi = ["llama-api-client>=0.1.0,<1.0.0"]
mistral = ["mistralai>=1.8.2"]
ollama = ["ollama>=0.4.8,<1.0.0"]
openai = ["openai>=1.68.0,<2.0.0"]
otel = ["opentelemetry-exporter-otlp-proto-http>=1.30.0,<2.0.0"]
writer = ["writer-sdk>=2.2.0,<3.0.0"]

sagemaker = [
    "boto3>=1.26.0,<2.0.0",
    "botocore>=1.29.0,<2.0.0",
    "boto3-stubs[sagemaker-runtime]>=1.26.0,<2.0.0",
]

a2a = [
    "a2a-sdk>=0.3.0,<0.4.0",
    "a2a-sdk[sql]>=0.3.0,<0.4.0",
    "uvicorn>=0.34.2,<1.0.0",
    "httpx>=0.28.1,<1.0.0",
    "fastapi>=0.115.12,<1.0.0",
    "starlette>=0.46.2,<1.0.0",
]
all = [
    "strands-agents[a2a,sagemaker,anthropic,litellm,llamaapi,ollama,openai,otel,mistral,writer]",
]

### DEPENDENCY GROUPS ### 
[dependency-groups]
dev = [
    "commitizen>=4.4.0,<5.0.0",
    "hatch>=1.0.0,<2.0.0",
    "moto>=5.1.0,<6.0.0",
    "mypy>=1.15.0,<2.0.0",
    "pre-commit>=3.2.0,<4.2.0",
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.26.0,<0.27.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-xdist>=3.0.0,<4.0.0",
    "ruff>=0.4.4,<0.5.0",
    "poethepoet>=0.36.0,<0.37.0",
]

### BUILD SYSTEM ### 
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/strands"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
# Tells Hatch to use your version control system (git) to determine the version.
source = "vcs"

### CODE QUALITY ### 

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
follow_untyped_imports = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "litellm"
ignore_missing_imports = true

[tool.ruff]
line-length = 120
include = [
    "examples/**/*.py",
    "src/**/*.py",
    "tests/**/*.py",
    "tests_integ/**/*.py",
]

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "D",   # pydocstyle
    "E",   # pycodestyle
    "F",   # pyflakes
    "G",   # logging format
    "I",   # isort
    "LOG", # logging
]

[tool.ruff.lint.per-file-ignores]
"!src/**/*.py" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
branch = true
source = ["src"]
context = "thread"
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
show_missing = true

[tool.coverage.html]
directory = "build/coverage/html"

[tool.coverage.xml]
output = "build/coverage/coverage.xml"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
bump_message = "chore(release): bump version $current_version -> $new_version"
version_files = ["pyproject.toml:version"]
update_changelog_on_bump = true
style = [
    [
        "qmark",
        "fg:#ff9d00 bold",
    ],
    [
        "question",
        "bold",
    ],
    [
        "answer",
        "fg:#ff9d00 bold",
    ],
    [
        "pointer",
        "fg:#ff9d00 bold",
    ],
    [
        "highlighted",
        "fg:#ff9d00 bold",
    ],
    [
        "selected",
        "fg:#cc5454",
    ],
    [
        "separator",
        "fg:#cc5454",
    ],
    [
        "instruction",
        "",
    ],
    [
        "text",
        "",
    ],
    [
        "disabled",
        "fg:#858585 italic",
    ],
]

### POETHEPOET + UV ###
[tool.poe]
executor.type = "uv"

[tool.poe.tasks]

# FORMATTING
format = { cmd = "ruff format src", help = "Format code with ruff" }
format-check = { cmd = "ruff format --check src", help = "Check code formatting" }

# LINTING  
lint = { cmd = "ruff check --fix src", help = "Lint and fix code with ruff" }
lint-check = { cmd = "ruff check src", help = "Check code linting" }

# TYPE CHECKING
typecheck = { cmd = "mypy src/strands", help = "Run type checking with mypy" }

# QUALITY CHECKS
code-quality = { sequence = [
    "format",
    "lint",
    "typecheck",
], help = "Run all quality checks" }

# TESTING
test = { cmd = "pytest -n auto -vv", help = "Run tests with pytest" }
test-cov = { cmd = "pytest -n auto -vv --cov --cov-config=pyproject.toml --cov-report=term-missing --cov-report=html --cov-report=xml", help = "Run tests with coverage" }

# INTEGRATION TESTING  
test-integ = { cmd = "pytest tests_integ -v", help = "Run integration tests" }

# COMBINED WORKFLOWS
test-all = { sequence = [
    "test-cov",
    "test-integ",
], help = "Run all tests with coverage" }

prepare = { sequence = [
    "code-quality",
    "test-cov",
], help = "Run full preparation pipeline (quality + tests)" }
